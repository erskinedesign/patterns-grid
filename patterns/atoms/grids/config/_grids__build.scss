/* ==========================================================================
   $GRID-BUILD
   ========================================================================== */
/**
 * Functions and mixins necessary for building the grid.
 */


/* 
   $CONTENT
   ========================================================================== */
/**
 * 1. Build columns
 */




/* 
 * 1.BUILD COLUMNS
 * Sets the width of columns depending on the total number of them.
 */

@mixin build-column($num) {
    width: percentage(($num / $columns));
}

/* by default all grid columns are full width */  
.grid__column {
    width: 100%; 
}

/**
 * Generate default column sizes from 1 - total # of columns.
 */

@for $i from 1 through $columns {
    .grid__column--#{$i} {
        @include build-column($i);
    }
}

/*
 * Generates widths depending on the viewport and grid settings.
 */
@mixin column($num: 1, $level: "") {

    @if ($level == "") {
        @include build-column($num);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-column($num);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-column($num);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-column($num);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-column($num);
        }
    }
}


/**
 * Column sizes at different breakpoints
 * There is a reason for this to reset CSS in media queries 
 * because each breakpoint has different column widths
 */

@each $level in $grid__levels {

    @for $i from 1 through $columns {
        .grid__column--#{$i}--#{$level} {
            @include column($i, $level);
        }
    }
}



/* 
   BUILD SUBGRID
   ========================================================================== */
/**
* In order to have nested grids we need to use a nasty hack. First we encapsulate a 
* nested .grid__column in the .subgrid class. Then we use the whacky box model to cheat
* the child column into thinking that itâ€™s parent (the subgrid) is actually the full 
* width of the grid.
*
* # of columns / (parent column width / # of columns) * 100 = subgrid width
*
*
* Unfortunately we have to do this for every grid level and breakpoint which bloats the 
* compiled CSS enormously. Use this only with a worflow like UNCSS that removes
* unused styles.
*/

@mixin build-subgrid($num) {
    width: percentage($columns / ($num / $columns) / $columns);
}


@for $i from 1 through $columns {
    .grid__column--#{$i} .grid__subgrid {
        @include build-subgrid($i);
    }
}


/**
 * Generates breakpoint classes depending on no. of levels
 */
@mixin responsive-subgrid($num: 1, $level: "") {
    @if ($level == "") {
        @include build-subgrid($num);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-subgrid($num);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-subgrid($num);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-subgrid($num);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-subgrid($num);
        }
    }
}

@each $level in $grid__levels {
    @for $i from 1 through $columns {
        .grid__column--#{$i}--#{$level} .grid__subgrid {
            @include responsive-subgrid($i, $level);
        }
    }
}




/* 
   ==========================================================================
   $PUSH-COLUMNS
   ========================================================================== */
/*
 * Generates all of the classes for pushing a column left or right.
 */



/* 
    GENERATE PUSH LEFT CLASSES   
    ========================================================================== */
@mixin build-push--left($num){
    margin-left:- percentage(($num/$columns));
}

/**
 * Generates standard classes from 1 through to the number of
 * total columns set.
 */
@for $i from 1 through $columns {
    .push--left-#{$i} {
        @include build-push--left($i);
    }
}

/**
 * Generates breakpoint classes depending on no. of levels
 */
@mixin responsive-push-left($num: 1, $level: "") {
    @if ($level == "") {
        @include build-push--left($num);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-push--left($num);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-push--left($num);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-push--left($num);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-push--left($num);
        }
    }
}

@each $level in $grid__levels {
    @for $i from 1 through $columns {
        .push--left-#{$i}--#{$level} {
            @include responsive-push-left($i, $level);
        }
    }
}


/* 
    GENERATE PUSH RIGHT CLASSES   
    ========================================================================== */

@mixin build-push--right($num) {
    margin-right:- (percentage(($num/$columns)));
}

/**
 * Generates standard classes from 1 through to the number of
 * total columns set.
 */
@for $i from 1 through $columns {
    .push--right-#{$i} {
        @include build-push--right($i);
    }
}

/**
 * Generates breakpoint classes depending on no. of levels
 */
@mixin responsive-push-right($num: 1, $level: ""){
    @if ($level == "") {
        @include build-push--left($num);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-push--right($num);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-push--right($num);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-push--right($num);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-push--right($num);
        }
    }
}

@each $level in $grid__levels {
    @for $i from 1 through $columns {
        .push--right-#{$i}--#{$level} {
            @include responsive-push-right($i, $level);
        }
    }
}


/* 
    GENERATE PUSH BOTH CLASSES   
    ========================================================================== */
/**
 * In order to set both left and right negative margins we also need to 
 * increase the width by the same amount.
 */
@mixin build-push--both($num) {
    width: (100%) + (percentage(($num/$columns)) * 2);
    margin-left:- percentage(($num/$columns));
}

@for $i from 1 through $columns {
    .push--both-#{$i} {
        @include build-push--both($i);
    }
}

@mixin responsive-push-both($num: 1, $level: ""){
     @if ($level == "") {
        @include build-push--both($num);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-push--both($num);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-push--both($num);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-push--both($num);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-push--both($num);
        }
    }
}

/* Push both classes */
@each $level in $grid__levels {
    @for $i from 1 through $columns {
        .push--both-#{$i}--#{$level}{
            @include responsive-push-both($i, $level);
        }
    }
}





/* 
    GENERATE GRID DIRECTION CLASSES   
    ========================================================================== */
$directions: left, right;

@mixin build-grid-float($direction){
    float: $direction;
    margin-left: 0;
}


@mixin responsive-grid-float($direction: "left", $level: ""){
     @if ($level == "") {
        @include build-grid-float($direction);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-grid-float($direction);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-grid-float($direction);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-grid-float($direction);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-grid-float($direction);
        }
    }
}

@each $level in $grid__levels {
    @each $direction in $directions {
        .grid__column.grid__column--#{$direction}--#{$level} {
            @include responsive-grid-float($direction, $level);
        }
    }
}



/* 
    GENERATE CENTER COLUMNS   
    ========================================================================== */
@mixin build-center($num) {
    margin-left: ((100 - (($num / $columns) * 100)) / 2 ) * 1%;
}

@for $i from 1 through $columns {
    .grid__column--center--#{$i} {
        @include build-center($i);
    }
}

@mixin responsive-build-center($num: 1, $level: ""){
     @if ($level == "") {
        @include build-center($num);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-center($num);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-center($num);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-center($num);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-center($num);
        }
    }
}

/* Push both classes */
@each $level in $grid__levels {
    @for $i from 1 through $columns {
        .grid__column.grid__column--center--#{$i}--#{$level}{
            @include responsive-build-center($i, $level);
        }
    }
}

/* 
    GRID OVERLAY BG COLOR   
    ========================================================================== */
/**
 * From the array set in grid settings, create the background colors for the various 
 * set breakpoints.
 */

@mixin responsive-grid-color($i){
    @for $i from 0 through length($overlay-color-collection) {

        @if ($i == 0) {
            background-color: nth($overlay-color-collection, $i+1);
        }

        @if ($i == 1) {
            @include respond-to("small and above"){
                background-color: nth($overlay-color-collection, $i+1);
            }
        }

        @if ($i == 2) {
            @include respond-to("medium and above"){
                background-color: nth($overlay-color-collection, $i+1);
            }
        }

        @if ($i == 3) {
            @include respond-to("large and above"){
                background-color: nth($overlay-color-collection, $i+1);
            }
        }

        @if ($i == 4) {
            @include respond-to("largest only"){
                background-color: nth($overlay-color-collection, $i+1);
            }
        }
    }
}





/**
 * String function that surronds "" around a variable, this is useful 
 * for adding variables to a pseudo elementâ€™s content. Used for adding
 * the number of columns to the body.
 */
@function string($number) {
    $number: $number + "";

    @return $number;
}





