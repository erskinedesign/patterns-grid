/* ==========================================================================
   $GRID-BUILD
   ========================================================================== */
/**
 * Functions and mixins necessary for building the grid
 */

// $grid__base-width: 315 !default;

// Why do we need to know the base width?
// $grid__col-width: 10 !default; 
// $grid__gutter: 15 !default;



// The overlay images should be automatically generated with JS from the original breakpoints and the number of columns.



/* 
   BUILD COLUMNS
   ========================================================================== */

/**
 * Sets the width of columns depending on the total number of them.
 */

@mixin build-column($num) {
    width: percentage(($num / $columns));
}


/*
 * Generates widths depending on the viewport and grid settings.
 */
@mixin column($num: 1, $level: "") {

    @if ($level == "") {
        @include build-column($num);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-column($num);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-column($num);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-column($num);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-column($num);
        }
    }
}





/**
 * Generate default column sizes with no breakpoints
 *
 * .grid__column--4 {
 *     width: @result;
 * }
 */

.grid__column {
    width: 100%; /* by default all grid columns are full width */  
}

@for $i from 1 through $columns {
    .grid__column--#{$i} {
        @include build-column($i);
    }
}

/**
 * Column sizes at different breakpoints
 * There is a reason for this to reset CSS in media queries 
 * because each breakpoint has different column widths
 */

@each $level in $grid__levels {

    @for $i from 1 through $columns {
        .grid__column--#{$i}--#{$level} {
            @include column($i, $level);
        }
    }
}


/* 
   ==========================================================================
   $PUSH-COLUMNS
   ========================================================================== */
/*
 * Generates classes for pushing a column left or right.
 */



/* 
    GENERATE PUSH LEFT CLASSES   
    ========================================================================== */
@mixin build-push--left($num){
    margin-left:- percentage(($num/$columns));
}

/**
 * Generates standard classes from 1 through to the number of
 * total columns set.
 */
@for $i from 1 through $columns {
    .push--left-#{$i} {
        @include build-push--left($i);
    }
}

/**
 * Generates breakpoint classes depending on no. of levels
 */
@mixin responsive-push-left($num: 1, $level: "") {
    @if ($level == "") {
        @include build-push--left($num);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-push--left($num);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-push--left($num);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-push--left($num);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-push--left($num);
        }
    }
}

@each $level in $grid__levels {
    @for $i from 1 through $columns {
        .push--left-#{$i}--#{$level} {
            @include responsive-push-left($i, $level);
        }
    }
}


/* 
    GENERATE PUSH RIGHT CLASSES   
    ========================================================================== */

@mixin build-push--right($num) {
    margin-right:- (percentage(($num/$columns)));
}

/**
 * Generates standard classes from 1 through to the number of
 * total columns set.
 */
@for $i from 1 through $columns {
    .push--right-#{$i} {
        @include build-push--right($i);
    }
}

/**
 * Generates breakpoint classes depending on no. of levels
 */
@mixin responsive-push-right($num: 1, $level: ""){
    @if ($level == "") {
        @include build-push--left($num);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-push--right($num);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-push--right($num);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-push--right($num);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-push--right($num);
        }
    }
}

@each $level in $grid__levels {
    @for $i from 1 through $columns {
        .push--right-#{$i}--#{$level} {
            @include responsive-push-right($i, $level);
        }
    }
}


/* 
    GENERATE PUSH BOTH CLASSES   
    ========================================================================== */
/**
 * In order to set both left and right negative margins we also need to 
 * increase the width by the same amount.
 */
@mixin build-push--both($num) {
    width: (100%) + (percentage(($num/$columns)) * 2);
    margin-left:- percentage(($num/$columns));
}

@for $i from 1 through $columns {
    .push--both-#{$i} {
        @include build-push--both($i);
    }
}

@mixin responsive-push-both($num: 1, $level: ""){
     @if ($level == "") {
        @include build-push--both($num);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-push--both($num);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-push--both($num);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-push--both($num);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-push--both($num);
        }
    }
}

/* Push both classes */
@each $level in $grid__levels {
    @for $i from 1 through $columns {
        .push--both-#{$i}--#{$level}{
            @include responsive-push-both($i, $level);
        }
    }
}



/* 
    GENERATE PUSH RESET CLASSES   
    ========================================================================== */
/**
 * At other breakpoints weâ€™ll need to reset these values back to margin: 0; so
 * we need a reset too.
 */

@mixin build-grid-reset($direction){
    margin-#{$direction}: 0;
}






/* 
    GENERATE GRID DIRECTION CLASSES   
    ========================================================================== */
$directions: left, right;

@mixin build-grid-float($direction){
    float: $direction;
}


@mixin responsive-grid-float($direction: "left", $level: ""){
     @if ($level == "") {
        @include build-grid-float($direction);
    }

    @if ($level == "small") {
        @include respond-to("small and above"){
            @include build-grid-float($direction);
        }
    }

    @if ($level == "medium") {
        @include respond-to("medium and above"){
            @include build-grid-float($direction);
        }
    }

    @if ($level == "large") {
        @include respond-to("large and above"){
            @include build-grid-float($direction);
        }
    }

    @if ($level == "largest") {
        @include respond-to("largest only"){
            @include build-grid-float($direction);
        }
    }
}

@each $level in $grid__levels {
    @each $direction in $directions {
        .grid__column.grid__column--#{$direction}--#{$level} {
            @include responsive-grid-float($direction, $level);
        }
    }
}


